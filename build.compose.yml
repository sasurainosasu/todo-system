# 各サービス（コンテナ）の定義
services:
  #--------------------------------
  # Nginx (Webサーバー)
  #--------------------------------
  nginx:
    container_name: build-nginx
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    ports:
      - "80:80"
    volumes:
      # appディレクトリをマウントしてNginxから参照できるようにする
      - ./app:/var/www/html
      # Nginxの設定ファイルをマウント
      - ./docker/nginx/build.default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
      - frontend
    networks:
      - app-network

  #--------------------------------
  # PHP-FPM
  #--------------------------------
  php:
    container_name: buildd-php
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    volumes:
      # appディレクトリをマウントしてPHPからファイルを実行できるようにする
      - ./app:/var/www/html
    environment:
      # MailHogの設定を追加
      MAILHOG_HOST: mailhog
      MAILHOG_PORT: 1025
    env_file:
      - .env
    networks:
      - app-network

  #--------------------------------
  # Next.js (フロントエンド)
  #--------------------------------
  frontend:
    container_name: build-frontend
    build:
      # ビルドのコンテキストをNext.jsプロジェクトのディレクトリに修正
      context: .
      # Dockerfileへの相対パスもコンテキストに合わせて修正
      dockerfile: ./docker/frontend/prod.Dockerfile
    volumes:
      # Next.jsのソースコードをマウントしてホットリロードを有効化
      - ./app/frontend/.next:/app/.next
      - ./app/frontend/public:/app/public
      # node_modulesはホストからマウントせず、コンテナ内のものを維持する
      - /app/node_modules
    ports:
      # Next.jsのdevサーバーが使用する3000番ポートを公開
      - "3000:3000"
    environment:
      # Docker環境でのホットリロードを安定させるための設定
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    networks:
      - app-network
    # コンテナを起動し続けるためにttyを有効化
    tty: true

  #--------------------------------
  # MySQL (データベース)
  #--------------------------------
  mysql:
    container_name: build-mysql
    image: mysql:8.0
    ports:
      # ホストの3306番ポートをコンテナの3306番ポートに接続
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_NAME} #各自変更
      MYSQL_USER: ${DB_USER} #各自変更
      MYSQL_PASSWORD: ${DB_PASSWORD} #各自変更
      MYSQL_ROOT_PASSWORD: rootpassword #各自変更
      TZ: Asia/Tokyo
    volumes:
      # データを永続化するための名前付きボリューム
      - db-data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./docker/mysql/sql:/docker-entrypoint-initdb.d #新規追加
    networks:
      - app-network

  #--------------------------------
  # phpMyAdmin (DB管理ツール)
  #--------------------------------
  db-admin:
    container_name: build-db-admin
    image: phpmyadmin/phpmyadmin
    ports:
      # ホストの8080番ポートをコンテナの80番ポートに接続
      - "8080:80"
    environment:
      # 接続先のMySQLホスト名を指定
      PMA_HOST: mysql
      PMA_PORT: 3306
    depends_on:
      - mysql
    networks:
      - app-network
      
  #--------------------------------
  # MailHog
  #--------------------------------
  mailhog:
    container_name: build-mailhog
    image: mailhog/mailhog
    logging:
      driver: "none"
    ports:
      # メール受信用のSMTPポート
      - "1025:1025"
      # Web UI用のHTTPポート
      - "8025:8025"
    networks:
      - app-network


# 名前付きボリュームの定義
volumes:
  db-data:

# サービスが接続するネットワークの定義
networks:
  app-network:
    driver: bridge